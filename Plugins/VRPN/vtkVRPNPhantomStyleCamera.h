/*=========================================================================

  Name:        vtkVRPNPhantomStyleCamera.h

  Author:      David Borland, The Renaissance Computing Institute (RENCI)

  Copyright:   The Renaissance Computing Institute (RENCI)

  License:     Licensed under the RENCI Open Source Software License v. 1.0.
               
               See included License.txt or 
               http://www.renci.org/resources/open-source-software-license
               for details.

=========================================================================*/
// .NAME vtkVRPNPhantomStyleCamera
// .SECTION Description
// vtkVRPNPhantomStyleCamera moves the camera based on Phantom events 
// generated by devices using the Virtual Reality Peripheral Network 
// (VRPN: http://www.cs.unc.edu/Research/vrpn/).  

// .SECTION see also
// vtkDeviceInteractor vtkInteractionDevice

#ifndef __vtkVRPNPhantomStyleCamera_h
#define __vtkVRPNPhantomStyleCamera_h

#include "vtkInteractionDeviceConfigure.h"

#include "vtkDeviceInteractorStyle.h"

#include "vtkVRPNPhantom.h"

#define CREATE_VTK_CONE 1

//
//class vtkCollisionDetectionFilter;
class pqView;
class pqPipelineSource;
class vtkActor;
class vtkConeSource;
class vtkVRPNPhantomStyleCamera : public vtkDeviceInteractorStyle
{
public:
  static vtkVRPNPhantomStyleCamera* New(); 
  vtkTypeRevisionMacro(vtkVRPNPhantomStyleCamera,vtkDeviceInteractorStyle);
  void PrintSelf(ostream&, vtkIndent); 

  // Description:
  // Perform interaction based on an event
  virtual void OnEvent(vtkObject* caller, unsigned long eid, void* callData);

  // Description:
  // Set the tracker receiving events from
  void SetPhantom(vtkVRPNPhantom*);

  // Description: 
  // Set and Get Create Tube
  void SetCreateTube(bool createTube);
  bool GetCreateTube();

  void SetActor(vtkActor* myActor);
  void SetConeSource(vtkConeSource* myCone);
  /*void SetCollisionDetectionFilter(vtkCollisionDetectionFilter* CollisionFilter);*/
  vtkActor* myActor;
  vtkConeSource* myCone;

  void SetEvaluationLog(ofstream* evaluationlog);

  //To handle showing timeline ribbons
  void SetShowingTimeline(int showingTimeline);

protected:
  vtkVRPNPhantomStyleCamera();
  ~vtkVRPNPhantomStyleCamera();

  virtual void OnPhantom(vtkVRPNPhantom*);
  /*
  virtual void PrintCollision(vtkCollisionDetectionFilter* CollisionFilter);*/

private: 

  vtkVRPNPhantomStyleCamera(const vtkVRPNPhantomStyleCamera&);  // Not implemented.
  void operator=(const vtkVRPNPhantomStyleCamera&);  // Not implemented.
  double* ScalePosition(double* position,vtkRenderer* renderer);
  void ComputeVisiblePropBounds( vtkRenderer* renderer1,double allBounds[6] );
  void RotateVisibleProps(double position[],double orientNew[]);
  double* ScaleByCameraFrustumPlanes(double* position,vtkRenderer* renderer,int sensorIndex);
  void CheckWithinPipelineBounds(pqView* view, vtkVRPNPhantom* Phantom,double* newPosition);
  void CreateStreamTracerTube(pqView* view, vtkVRPNPhantom* Phantom,double* newPosition);
  void ModifySeedPosition(pqPipelineSource* createdSource,double* newPosition);
  void DisplayCreatedObject(pqView* view,pqPipelineSource* createdSource, bool setVisible);
  //if inputIndex is -1, that means that we do not specify custom input source
  int CreateParaViewObject(int sourceIndex,int inputIndex, pqView* view, vtkVRPNPhantom* Phantom,double* newPosition,const char* name);
  int first;
  bool createTube;
  int showingTimeline;
  ofstream* evaluationlog;
};

#endif